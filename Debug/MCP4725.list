
MCP4725.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002878  08002878  0002084c  2**0
                  CONTENTS
  4 .ARM          00000008  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002880  08002880  0002084c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000084c  20000000  08002890  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000084c  080030dc  0002084c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  080030dc  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002084c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b31a  00000000  00000000  0002087c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000184e  00000000  00000000  0002bb96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000051e8  00000000  00000000  0002df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061fb  00000000  00000000  00033158  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000904aa  00000000  00000000  00039353  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c97fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be8  00000000  00000000  000c9878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000084c 	.word	0x2000084c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002844 	.word	0x08002844

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000850 	.word	0x20000850
 80001d4:	08002844 	.word	0x08002844

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
static void MX_I2C1_Init(void);



int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_Init();
 80004de:	f000 fa3d 	bl	800095c <HAL_Init>

  SystemClock_Config();
 80004e2:	f000 f817 	bl	8000514 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80004e6:	f000 f8b7 	bl	8000658 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80004ea:	f000 f887 	bl	80005fc <_ZL19MX_USART2_UART_Initv>
  adc.set_DAC(0xA5A5);

#endif
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004ee:	2120      	movs	r1, #32
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x34>)
 80004f2:	f000 fd26 	bl	8000f42 <HAL_GPIO_TogglePin>
	  for(uint32_t i = 0; i<500000;i++);
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <main+0x38>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d8f5      	bhi.n	80004ee <main+0x16>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	3301      	adds	r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	e7f7      	b.n	80004fa <main+0x22>
 800050a:	bf00      	nop
 800050c:	40020000 	.word	0x40020000
 8000510:	0007a11f 	.word	0x0007a11f

08000514 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 ffd2 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <_Z18SystemClock_Configv+0xe0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a2c      	ldr	r2, [pc, #176]	; (80005f4 <_Z18SystemClock_Configv+0xe0>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <_Z18SystemClock_Configv+0xe0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <_Z18SystemClock_Configv+0xe4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a26      	ldr	r2, [pc, #152]	; (80005f8 <_Z18SystemClock_Configv+0xe4>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b24      	ldr	r3, [pc, #144]	; (80005f8 <_Z18SystemClock_Configv+0xe4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000584:	2310      	movs	r3, #16
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800058c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000592:	2304      	movs	r3, #4
 8000594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fcec 	bl	8000f78 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	bf14      	ite	ne
 80005a6:	2301      	movne	r3, #1
 80005a8:	2300      	moveq	r3, #0
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 80005b0:	f000 f8c2 	bl	8000738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 ff41 	bl	8001458 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	bf14      	ite	ne
 80005dc:	2301      	movne	r3, #1
 80005de:	2300      	moveq	r3, #0
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f8a7 	bl	8000738 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000634:	f001 f902 	bl	800183c <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	bf14      	ite	ne
 800063e:	2301      	movne	r3, #1
 8000640:	2300      	moveq	r3, #0
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000648:	f000 f876 	bl	8000738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000868 	.word	0x20000868
 8000654:	40004400 	.word	0x40004400

08000658 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a2c      	ldr	r2, [pc, #176]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b2a      	ldr	r3, [pc, #168]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b26      	ldr	r3, [pc, #152]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <_ZL12MX_GPIO_Initv+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <_ZL12MX_GPIO_Initv+0xd4>)
 80006e4:	f000 fc14 	bl	8000f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <_ZL12MX_GPIO_Initv+0xd8>)
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <_ZL12MX_GPIO_Initv+0xdc>)
 80006fe:	f000 fa85 	bl	8000c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000702:	2320      	movs	r3, #32
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <_ZL12MX_GPIO_Initv+0xd4>)
 800071a:	f000 fa77 	bl	8000c0c <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	; 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40020000 	.word	0x40020000
 8000730:	10210000 	.word	0x10210000
 8000734:	40020800 	.word	0x40020800

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <HAL_MspInit+0x4c>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <HAL_MspInit+0x4c>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x4c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6413      	str	r3, [r2, #64]	; 0x40
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_UART_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12b      	bne.n	8000812 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_UART_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f2:	230c      	movs	r3, #12
 80007f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000802:	2307      	movs	r3, #7
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_UART_MspInit+0x8c>)
 800080e:	f000 f9fd 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020000 	.word	0x40020000

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 f8c0 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <_sbrk+0x50>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x16>
		heap_end = &end;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <_sbrk+0x50>)
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <_sbrk+0x54>)
 8000898:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <_sbrk+0x50>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <_sbrk+0x50>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4413      	add	r3, r2
 80008a8:	466a      	mov	r2, sp
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d907      	bls.n	80008be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008ae:	f001 fba3 	bl	8001ff8 <__errno>
 80008b2:	4602      	mov	r2, r0
 80008b4:	230c      	movs	r3, #12
 80008b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295
 80008bc:	e006      	b.n	80008cc <_sbrk+0x48>
	}

	heap_end += incr;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <_sbrk+0x50>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <_sbrk+0x50>)
 80008c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200008a8 	.word	0x200008a8
 80008d8:	20000908 	.word	0x20000908

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SystemInit+0x28>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <SystemInit+0x28>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SystemInit+0x28>)
 80008f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f6:	609a      	str	r2, [r3, #8]
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800090c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr  r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000926:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000928:	f842 3b04 	str.w	r3, [r2], #4

0800092c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000932:	f7ff ffd3 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 fb65 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdcd 	bl	80004d8 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000944:	08002890 	.word	0x08002890
  ldr  r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800094c:	2000084c 	.word	0x2000084c
  ldr  r2, =_sbss
 8000950:	2000084c 	.word	0x2000084c
  ldr  r3, = _ebss
 8000954:	20000904 	.word	0x20000904

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f90d 	bl	8000ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff feda 	bl	8000748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f917 	bl	8000bf2 <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f8ed 	bl	8000bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	200008f0 	.word	0x200008f0

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	200008f0 	.word	0x200008f0

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	6039      	str	r1, [r7, #0]
 8000aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db0a      	blt.n	8000ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	490c      	ldr	r1, [pc, #48]	; (8000af0 <__NVIC_SetPriority+0x4c>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	0112      	lsls	r2, r2, #4
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000acc:	e00a      	b.n	8000ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	4908      	ldr	r1, [pc, #32]	; (8000af4 <__NVIC_SetPriority+0x50>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f003 030f 	and.w	r3, r3, #15
 8000ada:	3b04      	subs	r3, #4
 8000adc:	0112      	lsls	r2, r2, #4
 8000ade:	b2d2      	uxtb	r2, r2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	761a      	strb	r2, [r3, #24]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000e100 	.word	0xe000e100
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	f1c3 0307 	rsb	r3, r3, #7
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	bf28      	it	cs
 8000b16:	2304      	movcs	r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d902      	bls.n	8000b28 <NVIC_EncodePriority+0x30>
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3b03      	subs	r3, #3
 8000b26:	e000      	b.n	8000b2a <NVIC_EncodePriority+0x32>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43da      	mvns	r2, r3
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b40:	f04f 31ff 	mov.w	r1, #4294967295
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4a:	43d9      	mvns	r1, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b50:	4313      	orrs	r3, r2
         );
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3724      	adds	r7, #36	; 0x24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b70:	d301      	bcc.n	8000b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b72:	2301      	movs	r3, #1
 8000b74:	e00f      	b.n	8000b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SysTick_Config+0x40>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b7e:	210f      	movs	r1, #15
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	f7ff ff8e 	bl	8000aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SysTick_Config+0x40>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <SysTick_Config+0x40>)
 8000b90:	2207      	movs	r2, #7
 8000b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	e000e010 	.word	0xe000e010

08000ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff ff47 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bcc:	f7ff ff5c 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	6978      	ldr	r0, [r7, #20]
 8000bd8:	f7ff ff8e 	bl	8000af8 <NVIC_EncodePriority>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff ff5d 	bl	8000aa4 <__NVIC_SetPriority>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ffb0 	bl	8000b60 <SysTick_Config>
 8000c00:	4603      	mov	r3, r0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	e159      	b.n	8000edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f040 8148 	bne.w	8000ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d00b      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d007      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c5a:	2b11      	cmp	r3, #17
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0xfc>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d123      	bne.n	8000d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691a      	ldr	r2, [r3, #16]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3208      	adds	r2, #8
 8000d4a:	69b9      	ldr	r1, [r7, #24]
 8000d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0203 	and.w	r2, r3, #3
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 80a2 	beq.w	8000ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b56      	ldr	r3, [pc, #344]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a55      	ldr	r2, [pc, #340]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b53      	ldr	r3, [pc, #332]	; (8000ef0 <HAL_GPIO_Init+0x2e4>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dae:	4a51      	ldr	r2, [pc, #324]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a48      	ldr	r2, [pc, #288]	; (8000ef8 <HAL_GPIO_Init+0x2ec>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d019      	beq.n	8000e0e <HAL_GPIO_Init+0x202>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a47      	ldr	r2, [pc, #284]	; (8000efc <HAL_GPIO_Init+0x2f0>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d013      	beq.n	8000e0a <HAL_GPIO_Init+0x1fe>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <HAL_GPIO_Init+0x2f4>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d00d      	beq.n	8000e06 <HAL_GPIO_Init+0x1fa>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <HAL_GPIO_Init+0x2f8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d007      	beq.n	8000e02 <HAL_GPIO_Init+0x1f6>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_GPIO_Init+0x2fc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_GPIO_Init+0x1f2>
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e008      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000dfe:	2307      	movs	r3, #7
 8000e00:	e006      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e02:	2303      	movs	r3, #3
 8000e04:	e004      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <HAL_GPIO_Init+0x204>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	69fa      	ldr	r2, [r7, #28]
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e20:	4934      	ldr	r1, [pc, #208]	; (8000ef4 <HAL_GPIO_Init+0x2e8>)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e52:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7c:	4a23      	ldr	r2, [pc, #140]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ea6:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_GPIO_Init+0x300>)
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	f67f aea2 	bls.w	8000c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	3724      	adds	r7, #36	; 0x24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40013800 	.word	0x40013800
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020c00 	.word	0x40020c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40013c00 	.word	0x40013c00

08000f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	807b      	strh	r3, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f20:	787b      	ldrb	r3, [r7, #1]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f2c:	e003      	b.n	8000f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	041a      	lsls	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	401a      	ands	r2, r3
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d104      	bne.n	8000f66 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	041a      	lsls	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e25b      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d075      	beq.n	8001082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f96:	4ba3      	ldr	r3, [pc, #652]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d00c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000faa:	2b08      	cmp	r3, #8
 8000fac:	d112      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fae:	4b9d      	ldr	r3, [pc, #628]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fba:	d10b      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	4b99      	ldr	r3, [pc, #612]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d05b      	beq.n	8001080 <HAL_RCC_OscConfig+0x108>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d157      	bne.n	8001080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e236      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fdc:	d106      	bne.n	8000fec <HAL_RCC_OscConfig+0x74>
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a90      	ldr	r2, [pc, #576]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0xb0>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0x98>
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a8a      	ldr	r2, [pc, #552]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b88      	ldr	r3, [pc, #544]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a87      	ldr	r2, [pc, #540]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0xb0>
 8001010:	4b84      	ldr	r3, [pc, #528]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a83      	ldr	r2, [pc, #524]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a80      	ldr	r2, [pc, #512]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fcfa 	bl	8000a28 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fcf6 	bl	8000a28 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	; 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1fb      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	4b76      	ldr	r3, [pc, #472]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0xc0>
 8001056:	e014      	b.n	8001082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fce6 	bl	8000a28 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fce2 	bl	8000a28 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	; 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e1e7      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	4b6c      	ldr	r3, [pc, #432]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0xe8>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d063      	beq.n	8001156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108e:	4b65      	ldr	r3, [pc, #404]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109a:	4b62      	ldr	r3, [pc, #392]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d11c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a6:	4b5f      	ldr	r3, [pc, #380]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d116      	bne.n	80010e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x152>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e1bb      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4952      	ldr	r1, [pc, #328]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	e03a      	b.n	8001156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e8:	4b4f      	ldr	r3, [pc, #316]	; (8001228 <HAL_RCC_OscConfig+0x2b0>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ee:	f7ff fc9b 	bl	8000a28 <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fc97 	bl	8000a28 <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e19c      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	4b46      	ldr	r3, [pc, #280]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4940      	ldr	r1, [pc, #256]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
 8001128:	e015      	b.n	8001156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112a:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_RCC_OscConfig+0x2b0>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001130:	f7ff fc7a 	bl	8000a28 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fc76 	bl	8000a28 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e17b      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d030      	beq.n	80011c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d016      	beq.n	8001198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116a:	4b30      	ldr	r3, [pc, #192]	; (800122c <HAL_RCC_OscConfig+0x2b4>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001170:	f7ff fc5a 	bl	8000a28 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fc56 	bl	8000a28 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e15b      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x200>
 8001196:	e015      	b.n	80011c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <HAL_RCC_OscConfig+0x2b4>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119e:	f7ff fc43 	bl	8000a28 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a6:	f7ff fc3f 	bl	8000a28 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e144      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80011ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f000 80a0 	beq.w	8001312 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10f      	bne.n	8001202 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fe:	2301      	movs	r3, #1
 8001200:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_RCC_OscConfig+0x2b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	2b00      	cmp	r3, #0
 800120c:	d121      	bne.n	8001252 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_RCC_OscConfig+0x2b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_RCC_OscConfig+0x2b8>)
 8001214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800121a:	f7ff fc05 	bl	8000a28 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	e011      	b.n	8001246 <HAL_RCC_OscConfig+0x2ce>
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	42470000 	.word	0x42470000
 800122c:	42470e80 	.word	0x42470e80
 8001230:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001234:	f7ff fbf8 	bl	8000a28 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e0fd      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001246:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x4d4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x2f0>
 800125a:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a7c      	ldr	r2, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
 8001266:	e01c      	b.n	80012a2 <HAL_RCC_OscConfig+0x32a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0x312>
 8001270:	4b77      	ldr	r3, [pc, #476]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	4a76      	ldr	r2, [pc, #472]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6713      	str	r3, [r2, #112]	; 0x70
 800127c:	4b74      	ldr	r3, [pc, #464]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a73      	ldr	r2, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
 8001288:	e00b      	b.n	80012a2 <HAL_RCC_OscConfig+0x32a>
 800128a:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800128c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128e:	4a70      	ldr	r2, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	6713      	str	r3, [r2, #112]	; 0x70
 8001296:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	4a6d      	ldr	r2, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800129c:	f023 0304 	bic.w	r3, r3, #4
 80012a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d015      	beq.n	80012d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012aa:	f7ff fbbd 	bl	8000a28 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b2:	f7ff fbb9 	bl	8000a28 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0bc      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0ee      	beq.n	80012b2 <HAL_RCC_OscConfig+0x33a>
 80012d4:	e014      	b.n	8001300 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fba7 	bl	8000a28 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fba3 	bl	8000a28 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0a6      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	4b56      	ldr	r3, [pc, #344]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ee      	bne.n	80012de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800130c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8092 	beq.w	8001440 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800131c:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d05c      	beq.n	80013e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d141      	bne.n	80013b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_RCC_OscConfig+0x4dc>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb77 	bl	8000a28 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fb73 	bl	8000a28 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e078      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f0      	bne.n	800133e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	019b      	lsls	r3, r3, #6
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001372:	085b      	lsrs	r3, r3, #1
 8001374:	3b01      	subs	r3, #1
 8001376:	041b      	lsls	r3, r3, #16
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137e:	061b      	lsls	r3, r3, #24
 8001380:	4933      	ldr	r1, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <HAL_RCC_OscConfig+0x4dc>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb4c 	bl	8000a28 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fb48 	bl	8000a28 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e04d      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x41c>
 80013b2:	e045      	b.n	8001440 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x4dc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb35 	bl	8000a28 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb31 	bl	8000a28 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e036      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f0      	bne.n	80013c2 <HAL_RCC_OscConfig+0x44a>
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e029      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ee:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_RCC_OscConfig+0x4d8>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d115      	bne.n	800143c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001416:	4013      	ands	r3, r2
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800141c:	4293      	cmp	r3, r2
 800141e:	d10d      	bne.n	800143c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d106      	bne.n	800143c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40007000 	.word	0x40007000
 8001450:	40023800 	.word	0x40023800
 8001454:	42470060 	.word	0x42470060

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0cc      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d90c      	bls.n	8001494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d044      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d119      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d003      	beq.n	8001516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	2b03      	cmp	r3, #3
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e067      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4934      	ldr	r1, [pc, #208]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fa6e 	bl	8000a28 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fa6a 	bl	8000a28 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e04f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d20c      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4601      	mov	r1, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	5cd3      	ldrb	r3, [r2, r3]
 80015f2:	fa21 f303 	lsr.w	r3, r1, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f9ce 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00
 8001614:	40023800 	.word	0x40023800
 8001618:	0800285c 	.word	0x0800285c
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163a:	4b63      	ldr	r3, [pc, #396]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b04      	cmp	r3, #4
 8001644:	d007      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x32>
 8001646:	2b08      	cmp	r3, #8
 8001648:	d008      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x38>
 800164a:	2b00      	cmp	r3, #0
 800164c:	f040 80b4 	bne.w	80017b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4b5e      	ldr	r3, [pc, #376]	; (80017cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001652:	60bb      	str	r3, [r7, #8]
       break;
 8001654:	e0b3      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001656:	4b5e      	ldr	r3, [pc, #376]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001658:	60bb      	str	r3, [r7, #8]
      break;
 800165a:	e0b0      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d04a      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	f04f 0400 	mov.w	r4, #0
 800167c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	ea03 0501 	and.w	r5, r3, r1
 8001688:	ea04 0602 	and.w	r6, r4, r2
 800168c:	4629      	mov	r1, r5
 800168e:	4632      	mov	r2, r6
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	f04f 0400 	mov.w	r4, #0
 8001698:	0154      	lsls	r4, r2, #5
 800169a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800169e:	014b      	lsls	r3, r1, #5
 80016a0:	4619      	mov	r1, r3
 80016a2:	4622      	mov	r2, r4
 80016a4:	1b49      	subs	r1, r1, r5
 80016a6:	eb62 0206 	sbc.w	r2, r2, r6
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f04f 0400 	mov.w	r4, #0
 80016b2:	0194      	lsls	r4, r2, #6
 80016b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b8:	018b      	lsls	r3, r1, #6
 80016ba:	1a5b      	subs	r3, r3, r1
 80016bc:	eb64 0402 	sbc.w	r4, r4, r2
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	00e2      	lsls	r2, r4, #3
 80016ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ce:	00d9      	lsls	r1, r3, #3
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	195b      	adds	r3, r3, r5
 80016d6:	eb44 0406 	adc.w	r4, r4, r6
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	0262      	lsls	r2, r4, #9
 80016e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016e8:	0259      	lsls	r1, r3, #9
 80016ea:	460b      	mov	r3, r1
 80016ec:	4614      	mov	r4, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f04f 0400 	mov.w	r4, #0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4623      	mov	r3, r4
 80016fc:	f7fe fd6c 	bl	80001d8 <__aeabi_uldivmod>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e049      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	f04f 0400 	mov.w	r4, #0
 8001712:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	ea03 0501 	and.w	r5, r3, r1
 800171e:	ea04 0602 	and.w	r6, r4, r2
 8001722:	4629      	mov	r1, r5
 8001724:	4632      	mov	r2, r6
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	f04f 0400 	mov.w	r4, #0
 800172e:	0154      	lsls	r4, r2, #5
 8001730:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001734:	014b      	lsls	r3, r1, #5
 8001736:	4619      	mov	r1, r3
 8001738:	4622      	mov	r2, r4
 800173a:	1b49      	subs	r1, r1, r5
 800173c:	eb62 0206 	sbc.w	r2, r2, r6
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f04f 0400 	mov.w	r4, #0
 8001748:	0194      	lsls	r4, r2, #6
 800174a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	1a5b      	subs	r3, r3, r1
 8001752:	eb64 0402 	sbc.w	r4, r4, r2
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	00e2      	lsls	r2, r4, #3
 8001760:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001764:	00d9      	lsls	r1, r3, #3
 8001766:	460b      	mov	r3, r1
 8001768:	4614      	mov	r4, r2
 800176a:	195b      	adds	r3, r3, r5
 800176c:	eb44 0406 	adc.w	r4, r4, r6
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	02a2      	lsls	r2, r4, #10
 800177a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800177e:	0299      	lsls	r1, r3, #10
 8001780:	460b      	mov	r3, r1
 8001782:	4614      	mov	r4, r2
 8001784:	4618      	mov	r0, r3
 8001786:	4621      	mov	r1, r4
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f04f 0400 	mov.w	r4, #0
 800178e:	461a      	mov	r2, r3
 8001790:	4623      	mov	r3, r4
 8001792:	f7fe fd21 	bl	80001d8 <__aeabi_uldivmod>
 8001796:	4603      	mov	r3, r0
 8001798:	460c      	mov	r4, r1
 800179a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	0c1b      	lsrs	r3, r3, #16
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	60bb      	str	r3, [r7, #8]
      break;
 80017b6:	e002      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017ba:	60bb      	str	r3, [r7, #8]
      break;
 80017bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017be:	68bb      	ldr	r3, [r7, #8]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	00f42400 	.word	0x00f42400
 80017d0:	007a1200 	.word	0x007a1200

080017d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000000 	.word	0x20000000

080017ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 80017f4:	4601      	mov	r1, r0
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetPCLK1Freq+0x20>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	0a9b      	lsrs	r3, r3, #10
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	4a03      	ldr	r2, [pc, #12]	; (8001810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	0800286c 	.word	0x0800286c

08001814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001818:	f7ff ffdc 	bl	80017d4 <HAL_RCC_GetHCLKFreq>
 800181c:	4601      	mov	r1, r0
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0b5b      	lsrs	r3, r3, #13
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4a03      	ldr	r2, [pc, #12]	; (8001838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	0800286c 	.word	0x0800286c

0800183c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e03f      	b.n	80018ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7fe ff98 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800187e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 f829 	bl	80018d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001894:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2220      	movs	r2, #32
 80018c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800191a:	f023 030c 	bic.w	r3, r3, #12
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	68f9      	ldr	r1, [r7, #12]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699a      	ldr	r2, [r3, #24]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001946:	f040 818b 	bne.w	8001c60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4ac1      	ldr	r2, [pc, #772]	; (8001c54 <UART_SetConfig+0x37c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d005      	beq.n	8001960 <UART_SetConfig+0x88>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4abf      	ldr	r2, [pc, #764]	; (8001c58 <UART_SetConfig+0x380>)
 800195a:	4293      	cmp	r3, r2
 800195c:	f040 80bd 	bne.w	8001ada <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001960:	f7ff ff58 	bl	8001814 <HAL_RCC_GetPCLK2Freq>
 8001964:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	461d      	mov	r5, r3
 800196a:	f04f 0600 	mov.w	r6, #0
 800196e:	46a8      	mov	r8, r5
 8001970:	46b1      	mov	r9, r6
 8001972:	eb18 0308 	adds.w	r3, r8, r8
 8001976:	eb49 0409 	adc.w	r4, r9, r9
 800197a:	4698      	mov	r8, r3
 800197c:	46a1      	mov	r9, r4
 800197e:	eb18 0805 	adds.w	r8, r8, r5
 8001982:	eb49 0906 	adc.w	r9, r9, r6
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001992:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001996:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800199a:	4688      	mov	r8, r1
 800199c:	4691      	mov	r9, r2
 800199e:	eb18 0005 	adds.w	r0, r8, r5
 80019a2:	eb49 0106 	adc.w	r1, r9, r6
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	461d      	mov	r5, r3
 80019ac:	f04f 0600 	mov.w	r6, #0
 80019b0:	196b      	adds	r3, r5, r5
 80019b2:	eb46 0406 	adc.w	r4, r6, r6
 80019b6:	461a      	mov	r2, r3
 80019b8:	4623      	mov	r3, r4
 80019ba:	f7fe fc0d 	bl	80001d8 <__aeabi_uldivmod>
 80019be:	4603      	mov	r3, r0
 80019c0:	460c      	mov	r4, r1
 80019c2:	461a      	mov	r2, r3
 80019c4:	4ba5      	ldr	r3, [pc, #660]	; (8001c5c <UART_SetConfig+0x384>)
 80019c6:	fba3 2302 	umull	r2, r3, r3, r2
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	461d      	mov	r5, r3
 80019d4:	f04f 0600 	mov.w	r6, #0
 80019d8:	46a9      	mov	r9, r5
 80019da:	46b2      	mov	sl, r6
 80019dc:	eb19 0309 	adds.w	r3, r9, r9
 80019e0:	eb4a 040a 	adc.w	r4, sl, sl
 80019e4:	4699      	mov	r9, r3
 80019e6:	46a2      	mov	sl, r4
 80019e8:	eb19 0905 	adds.w	r9, r9, r5
 80019ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001a00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001a04:	4689      	mov	r9, r1
 8001a06:	4692      	mov	sl, r2
 8001a08:	eb19 0005 	adds.w	r0, r9, r5
 8001a0c:	eb4a 0106 	adc.w	r1, sl, r6
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	461d      	mov	r5, r3
 8001a16:	f04f 0600 	mov.w	r6, #0
 8001a1a:	196b      	adds	r3, r5, r5
 8001a1c:	eb46 0406 	adc.w	r4, r6, r6
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7fe fbd8 	bl	80001d8 <__aeabi_uldivmod>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <UART_SetConfig+0x384>)
 8001a30:	fba3 1302 	umull	r1, r3, r3, r2
 8001a34:	095b      	lsrs	r3, r3, #5
 8001a36:	2164      	movs	r1, #100	; 0x64
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	3332      	adds	r3, #50	; 0x32
 8001a42:	4a86      	ldr	r2, [pc, #536]	; (8001c5c <UART_SetConfig+0x384>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	095b      	lsrs	r3, r3, #5
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a50:	4498      	add	r8, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	461d      	mov	r5, r3
 8001a56:	f04f 0600 	mov.w	r6, #0
 8001a5a:	46a9      	mov	r9, r5
 8001a5c:	46b2      	mov	sl, r6
 8001a5e:	eb19 0309 	adds.w	r3, r9, r9
 8001a62:	eb4a 040a 	adc.w	r4, sl, sl
 8001a66:	4699      	mov	r9, r3
 8001a68:	46a2      	mov	sl, r4
 8001a6a:	eb19 0905 	adds.w	r9, r9, r5
 8001a6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001a72:	f04f 0100 	mov.w	r1, #0
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001a82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001a86:	4689      	mov	r9, r1
 8001a88:	4692      	mov	sl, r2
 8001a8a:	eb19 0005 	adds.w	r0, r9, r5
 8001a8e:	eb4a 0106 	adc.w	r1, sl, r6
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	461d      	mov	r5, r3
 8001a98:	f04f 0600 	mov.w	r6, #0
 8001a9c:	196b      	adds	r3, r5, r5
 8001a9e:	eb46 0406 	adc.w	r4, r6, r6
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4623      	mov	r3, r4
 8001aa6:	f7fe fb97 	bl	80001d8 <__aeabi_uldivmod>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <UART_SetConfig+0x384>)
 8001ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2164      	movs	r1, #100	; 0x64
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	3332      	adds	r3, #50	; 0x32
 8001ac4:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <UART_SetConfig+0x384>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	f003 0207 	and.w	r2, r3, #7
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4442      	add	r2, r8
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e26f      	b.n	8001fba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ada:	f7ff fe87 	bl	80017ec <HAL_RCC_GetPCLK1Freq>
 8001ade:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	f04f 0600 	mov.w	r6, #0
 8001ae8:	46a8      	mov	r8, r5
 8001aea:	46b1      	mov	r9, r6
 8001aec:	eb18 0308 	adds.w	r3, r8, r8
 8001af0:	eb49 0409 	adc.w	r4, r9, r9
 8001af4:	4698      	mov	r8, r3
 8001af6:	46a1      	mov	r9, r4
 8001af8:	eb18 0805 	adds.w	r8, r8, r5
 8001afc:	eb49 0906 	adc.w	r9, r9, r6
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001b0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001b10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001b14:	4688      	mov	r8, r1
 8001b16:	4691      	mov	r9, r2
 8001b18:	eb18 0005 	adds.w	r0, r8, r5
 8001b1c:	eb49 0106 	adc.w	r1, r9, r6
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	461d      	mov	r5, r3
 8001b26:	f04f 0600 	mov.w	r6, #0
 8001b2a:	196b      	adds	r3, r5, r5
 8001b2c:	eb46 0406 	adc.w	r4, r6, r6
 8001b30:	461a      	mov	r2, r3
 8001b32:	4623      	mov	r3, r4
 8001b34:	f7fe fb50 	bl	80001d8 <__aeabi_uldivmod>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <UART_SetConfig+0x384>)
 8001b40:	fba3 2302 	umull	r2, r3, r3, r2
 8001b44:	095b      	lsrs	r3, r3, #5
 8001b46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	f04f 0600 	mov.w	r6, #0
 8001b52:	46a9      	mov	r9, r5
 8001b54:	46b2      	mov	sl, r6
 8001b56:	eb19 0309 	adds.w	r3, r9, r9
 8001b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8001b5e:	4699      	mov	r9, r3
 8001b60:	46a2      	mov	sl, r4
 8001b62:	eb19 0905 	adds.w	r9, r9, r5
 8001b66:	eb4a 0a06 	adc.w	sl, sl, r6
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001b7e:	4689      	mov	r9, r1
 8001b80:	4692      	mov	sl, r2
 8001b82:	eb19 0005 	adds.w	r0, r9, r5
 8001b86:	eb4a 0106 	adc.w	r1, sl, r6
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	461d      	mov	r5, r3
 8001b90:	f04f 0600 	mov.w	r6, #0
 8001b94:	196b      	adds	r3, r5, r5
 8001b96:	eb46 0406 	adc.w	r4, r6, r6
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	f7fe fb1b 	bl	80001d8 <__aeabi_uldivmod>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <UART_SetConfig+0x384>)
 8001baa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	2164      	movs	r1, #100	; 0x64
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	3332      	adds	r3, #50	; 0x32
 8001bbc:	4a27      	ldr	r2, [pc, #156]	; (8001c5c <UART_SetConfig+0x384>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001bca:	4498      	add	r8, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	461d      	mov	r5, r3
 8001bd0:	f04f 0600 	mov.w	r6, #0
 8001bd4:	46a9      	mov	r9, r5
 8001bd6:	46b2      	mov	sl, r6
 8001bd8:	eb19 0309 	adds.w	r3, r9, r9
 8001bdc:	eb4a 040a 	adc.w	r4, sl, sl
 8001be0:	4699      	mov	r9, r3
 8001be2:	46a2      	mov	sl, r4
 8001be4:	eb19 0905 	adds.w	r9, r9, r5
 8001be8:	eb4a 0a06 	adc.w	sl, sl, r6
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bf8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001bfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001c00:	4689      	mov	r9, r1
 8001c02:	4692      	mov	sl, r2
 8001c04:	eb19 0005 	adds.w	r0, r9, r5
 8001c08:	eb4a 0106 	adc.w	r1, sl, r6
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	461d      	mov	r5, r3
 8001c12:	f04f 0600 	mov.w	r6, #0
 8001c16:	196b      	adds	r3, r5, r5
 8001c18:	eb46 0406 	adc.w	r4, r6, r6
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4623      	mov	r3, r4
 8001c20:	f7fe fada 	bl	80001d8 <__aeabi_uldivmod>
 8001c24:	4603      	mov	r3, r0
 8001c26:	460c      	mov	r4, r1
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <UART_SetConfig+0x384>)
 8001c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	2164      	movs	r1, #100	; 0x64
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	3332      	adds	r3, #50	; 0x32
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <UART_SetConfig+0x384>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	f003 0207 	and.w	r2, r3, #7
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4442      	add	r2, r8
 8001c50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001c52:	e1b2      	b.n	8001fba <UART_SetConfig+0x6e2>
 8001c54:	40011000 	.word	0x40011000
 8001c58:	40011400 	.word	0x40011400
 8001c5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4ad7      	ldr	r2, [pc, #860]	; (8001fc4 <UART_SetConfig+0x6ec>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d005      	beq.n	8001c76 <UART_SetConfig+0x39e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4ad6      	ldr	r2, [pc, #856]	; (8001fc8 <UART_SetConfig+0x6f0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f040 80d1 	bne.w	8001e18 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c76:	f7ff fdcd 	bl	8001814 <HAL_RCC_GetPCLK2Freq>
 8001c7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	469a      	mov	sl, r3
 8001c80:	f04f 0b00 	mov.w	fp, #0
 8001c84:	46d0      	mov	r8, sl
 8001c86:	46d9      	mov	r9, fp
 8001c88:	eb18 0308 	adds.w	r3, r8, r8
 8001c8c:	eb49 0409 	adc.w	r4, r9, r9
 8001c90:	4698      	mov	r8, r3
 8001c92:	46a1      	mov	r9, r4
 8001c94:	eb18 080a 	adds.w	r8, r8, sl
 8001c98:	eb49 090b 	adc.w	r9, r9, fp
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001ca8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001cac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001cb0:	4688      	mov	r8, r1
 8001cb2:	4691      	mov	r9, r2
 8001cb4:	eb1a 0508 	adds.w	r5, sl, r8
 8001cb8:	eb4b 0609 	adc.w	r6, fp, r9
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	0094      	lsls	r4, r2, #2
 8001cd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001cd4:	008b      	lsls	r3, r1, #2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	4628      	mov	r0, r5
 8001cdc:	4631      	mov	r1, r6
 8001cde:	f7fe fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4bb8      	ldr	r3, [pc, #736]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001cea:	fba3 2302 	umull	r2, r3, r3, r2
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	469b      	mov	fp, r3
 8001cf8:	f04f 0c00 	mov.w	ip, #0
 8001cfc:	46d9      	mov	r9, fp
 8001cfe:	46e2      	mov	sl, ip
 8001d00:	eb19 0309 	adds.w	r3, r9, r9
 8001d04:	eb4a 040a 	adc.w	r4, sl, sl
 8001d08:	4699      	mov	r9, r3
 8001d0a:	46a2      	mov	sl, r4
 8001d0c:	eb19 090b 	adds.w	r9, r9, fp
 8001d10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001d28:	4689      	mov	r9, r1
 8001d2a:	4692      	mov	sl, r2
 8001d2c:	eb1b 0509 	adds.w	r5, fp, r9
 8001d30:	eb4c 060a 	adc.w	r6, ip, sl
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	0094      	lsls	r4, r2, #2
 8001d48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001d4c:	008b      	lsls	r3, r1, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4623      	mov	r3, r4
 8001d52:	4628      	mov	r0, r5
 8001d54:	4631      	mov	r1, r6
 8001d56:	f7fe fa3f 	bl	80001d8 <__aeabi_uldivmod>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4b9a      	ldr	r3, [pc, #616]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001d62:	fba3 1302 	umull	r1, r3, r3, r2
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2164      	movs	r1, #100	; 0x64
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	3332      	adds	r3, #50	; 0x32
 8001d74:	4a95      	ldr	r2, [pc, #596]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	4498      	add	r8, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	469b      	mov	fp, r3
 8001d86:	f04f 0c00 	mov.w	ip, #0
 8001d8a:	46d9      	mov	r9, fp
 8001d8c:	46e2      	mov	sl, ip
 8001d8e:	eb19 0309 	adds.w	r3, r9, r9
 8001d92:	eb4a 040a 	adc.w	r4, sl, sl
 8001d96:	4699      	mov	r9, r3
 8001d98:	46a2      	mov	sl, r4
 8001d9a:	eb19 090b 	adds.w	r9, r9, fp
 8001d9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001db6:	4689      	mov	r9, r1
 8001db8:	4692      	mov	sl, r2
 8001dba:	eb1b 0509 	adds.w	r5, fp, r9
 8001dbe:	eb4c 060a 	adc.w	r6, ip, sl
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	f04f 0400 	mov.w	r4, #0
 8001dd4:	0094      	lsls	r4, r2, #2
 8001dd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001dda:	008b      	lsls	r3, r1, #2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4623      	mov	r3, r4
 8001de0:	4628      	mov	r0, r5
 8001de2:	4631      	mov	r1, r6
 8001de4:	f7fe f9f8 	bl	80001d8 <__aeabi_uldivmod>
 8001de8:	4603      	mov	r3, r0
 8001dea:	460c      	mov	r4, r1
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001df0:	fba3 1302 	umull	r1, r3, r3, r2
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	2164      	movs	r1, #100	; 0x64
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	3332      	adds	r3, #50	; 0x32
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	095b      	lsrs	r3, r3, #5
 8001e0a:	f003 020f 	and.w	r2, r3, #15
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4442      	add	r2, r8
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	e0d0      	b.n	8001fba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e18:	f7ff fce8 	bl	80017ec <HAL_RCC_GetPCLK1Freq>
 8001e1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	469a      	mov	sl, r3
 8001e22:	f04f 0b00 	mov.w	fp, #0
 8001e26:	46d0      	mov	r8, sl
 8001e28:	46d9      	mov	r9, fp
 8001e2a:	eb18 0308 	adds.w	r3, r8, r8
 8001e2e:	eb49 0409 	adc.w	r4, r9, r9
 8001e32:	4698      	mov	r8, r3
 8001e34:	46a1      	mov	r9, r4
 8001e36:	eb18 080a 	adds.w	r8, r8, sl
 8001e3a:	eb49 090b 	adc.w	r9, r9, fp
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e52:	4688      	mov	r8, r1
 8001e54:	4691      	mov	r9, r2
 8001e56:	eb1a 0508 	adds.w	r5, sl, r8
 8001e5a:	eb4b 0609 	adc.w	r6, fp, r9
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	f04f 0400 	mov.w	r4, #0
 8001e70:	0094      	lsls	r4, r2, #2
 8001e72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001e76:	008b      	lsls	r3, r1, #2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	4631      	mov	r1, r6
 8001e80:	f7fe f9aa 	bl	80001d8 <__aeabi_uldivmod>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001e8c:	fba3 2302 	umull	r2, r3, r3, r2
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	469b      	mov	fp, r3
 8001e9a:	f04f 0c00 	mov.w	ip, #0
 8001e9e:	46d9      	mov	r9, fp
 8001ea0:	46e2      	mov	sl, ip
 8001ea2:	eb19 0309 	adds.w	r3, r9, r9
 8001ea6:	eb4a 040a 	adc.w	r4, sl, sl
 8001eaa:	4699      	mov	r9, r3
 8001eac:	46a2      	mov	sl, r4
 8001eae:	eb19 090b 	adds.w	r9, r9, fp
 8001eb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001eb6:	f04f 0100 	mov.w	r1, #0
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ec2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ec6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001eca:	4689      	mov	r9, r1
 8001ecc:	4692      	mov	sl, r2
 8001ece:	eb1b 0509 	adds.w	r5, fp, r9
 8001ed2:	eb4c 060a 	adc.w	r6, ip, sl
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f04f 0400 	mov.w	r4, #0
 8001ee8:	0094      	lsls	r4, r2, #2
 8001eea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001eee:	008b      	lsls	r3, r1, #2
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	4631      	mov	r1, r6
 8001ef8:	f7fe f96e 	bl	80001d8 <__aeabi_uldivmod>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b32      	ldr	r3, [pc, #200]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001f04:	fba3 1302 	umull	r1, r3, r3, r2
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	2164      	movs	r1, #100	; 0x64
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	3332      	adds	r3, #50	; 0x32
 8001f16:	4a2d      	ldr	r2, [pc, #180]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001f18:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f22:	4498      	add	r8, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	469b      	mov	fp, r3
 8001f28:	f04f 0c00 	mov.w	ip, #0
 8001f2c:	46d9      	mov	r9, fp
 8001f2e:	46e2      	mov	sl, ip
 8001f30:	eb19 0309 	adds.w	r3, r9, r9
 8001f34:	eb4a 040a 	adc.w	r4, sl, sl
 8001f38:	4699      	mov	r9, r3
 8001f3a:	46a2      	mov	sl, r4
 8001f3c:	eb19 090b 	adds.w	r9, r9, fp
 8001f40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f58:	4689      	mov	r9, r1
 8001f5a:	4692      	mov	sl, r2
 8001f5c:	eb1b 0509 	adds.w	r5, fp, r9
 8001f60:	eb4c 060a 	adc.w	r6, ip, sl
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	f04f 0400 	mov.w	r4, #0
 8001f76:	0094      	lsls	r4, r2, #2
 8001f78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8001f7c:	008b      	lsls	r3, r1, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4623      	mov	r3, r4
 8001f82:	4628      	mov	r0, r5
 8001f84:	4631      	mov	r1, r6
 8001f86:	f7fe f927 	bl	80001d8 <__aeabi_uldivmod>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460c      	mov	r4, r1
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001f92:	fba3 1302 	umull	r1, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2164      	movs	r1, #100	; 0x64
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	3332      	adds	r3, #50	; 0x32
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <UART_SetConfig+0x6f4>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4442      	add	r2, r8
 8001fb6:	609a      	str	r2, [r3, #8]
}
 8001fb8:	e7ff      	b.n	8001fba <UART_SetConfig+0x6e2>
 8001fba:	bf00      	nop
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400
 8001fcc:	51eb851f 	.word	0x51eb851f

08001fd0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8001fd0:	b538      	push	{r3, r4, r5, lr}
 8001fd2:	4c08      	ldr	r4, [pc, #32]	; (8001ff4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8001fd4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8001fd8:	4628      	mov	r0, r5
 8001fda:	60e5      	str	r5, [r4, #12]
 8001fdc:	f000 f838 	bl	8002050 <malloc>
 8001fe0:	60a0      	str	r0, [r4, #8]
 8001fe2:	b120      	cbz	r0, 8001fee <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	6060      	str	r0, [r4, #4]
 8001fe8:	e9c0 5300 	strd	r5, r3, [r0]
 8001fec:	bd38      	pop	{r3, r4, r5, pc}
 8001fee:	60e0      	str	r0, [r4, #12]
 8001ff0:	6060      	str	r0, [r4, #4]
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	200008ac 	.word	0x200008ac

08001ff8 <__errno>:
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <__errno+0x8>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000000c 	.word	0x2000000c

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	4e0d      	ldr	r6, [pc, #52]	; (800203c <__libc_init_array+0x38>)
 8002008:	4c0d      	ldr	r4, [pc, #52]	; (8002040 <__libc_init_array+0x3c>)
 800200a:	1ba4      	subs	r4, r4, r6
 800200c:	10a4      	asrs	r4, r4, #2
 800200e:	2500      	movs	r5, #0
 8002010:	42a5      	cmp	r5, r4
 8002012:	d109      	bne.n	8002028 <__libc_init_array+0x24>
 8002014:	4e0b      	ldr	r6, [pc, #44]	; (8002044 <__libc_init_array+0x40>)
 8002016:	4c0c      	ldr	r4, [pc, #48]	; (8002048 <__libc_init_array+0x44>)
 8002018:	f000 fc14 	bl	8002844 <_init>
 800201c:	1ba4      	subs	r4, r4, r6
 800201e:	10a4      	asrs	r4, r4, #2
 8002020:	2500      	movs	r5, #0
 8002022:	42a5      	cmp	r5, r4
 8002024:	d105      	bne.n	8002032 <__libc_init_array+0x2e>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800202c:	4798      	blx	r3
 800202e:	3501      	adds	r5, #1
 8002030:	e7ee      	b.n	8002010 <__libc_init_array+0xc>
 8002032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002036:	4798      	blx	r3
 8002038:	3501      	adds	r5, #1
 800203a:	e7f2      	b.n	8002022 <__libc_init_array+0x1e>
 800203c:	08002880 	.word	0x08002880
 8002040:	08002880 	.word	0x08002880
 8002044:	08002880 	.word	0x08002880
 8002048:	0800288c 	.word	0x0800288c

0800204c <__retarget_lock_acquire_recursive>:
 800204c:	4770      	bx	lr

0800204e <__retarget_lock_release_recursive>:
 800204e:	4770      	bx	lr

08002050 <malloc>:
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <malloc+0xc>)
 8002052:	4601      	mov	r1, r0
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	f000 b803 	b.w	8002060 <_malloc_r>
 800205a:	bf00      	nop
 800205c:	2000000c 	.word	0x2000000c

08002060 <_malloc_r>:
 8002060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002064:	f101 050b 	add.w	r5, r1, #11
 8002068:	2d16      	cmp	r5, #22
 800206a:	4606      	mov	r6, r0
 800206c:	d906      	bls.n	800207c <_malloc_r+0x1c>
 800206e:	f035 0507 	bics.w	r5, r5, #7
 8002072:	d504      	bpl.n	800207e <_malloc_r+0x1e>
 8002074:	230c      	movs	r3, #12
 8002076:	6033      	str	r3, [r6, #0]
 8002078:	2400      	movs	r4, #0
 800207a:	e1a8      	b.n	80023ce <_malloc_r+0x36e>
 800207c:	2510      	movs	r5, #16
 800207e:	428d      	cmp	r5, r1
 8002080:	d3f8      	bcc.n	8002074 <_malloc_r+0x14>
 8002082:	4630      	mov	r0, r6
 8002084:	f000 fa2a 	bl	80024dc <__malloc_lock>
 8002088:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800208c:	4fc0      	ldr	r7, [pc, #768]	; (8002390 <_malloc_r+0x330>)
 800208e:	d238      	bcs.n	8002102 <_malloc_r+0xa2>
 8002090:	f105 0208 	add.w	r2, r5, #8
 8002094:	443a      	add	r2, r7
 8002096:	f1a2 0108 	sub.w	r1, r2, #8
 800209a:	6854      	ldr	r4, [r2, #4]
 800209c:	428c      	cmp	r4, r1
 800209e:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80020a2:	d102      	bne.n	80020aa <_malloc_r+0x4a>
 80020a4:	68d4      	ldr	r4, [r2, #12]
 80020a6:	42a2      	cmp	r2, r4
 80020a8:	d010      	beq.n	80020cc <_malloc_r+0x6c>
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80020b0:	f023 0303 	bic.w	r3, r3, #3
 80020b4:	60ca      	str	r2, [r1, #12]
 80020b6:	4423      	add	r3, r4
 80020b8:	6091      	str	r1, [r2, #8]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	f042 0201 	orr.w	r2, r2, #1
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	4630      	mov	r0, r6
 80020c4:	f000 fa10 	bl	80024e8 <__malloc_unlock>
 80020c8:	3408      	adds	r4, #8
 80020ca:	e180      	b.n	80023ce <_malloc_r+0x36e>
 80020cc:	3302      	adds	r3, #2
 80020ce:	4ab1      	ldr	r2, [pc, #708]	; (8002394 <_malloc_r+0x334>)
 80020d0:	693c      	ldr	r4, [r7, #16]
 80020d2:	4294      	cmp	r4, r2
 80020d4:	4611      	mov	r1, r2
 80020d6:	d075      	beq.n	80021c4 <_malloc_r+0x164>
 80020d8:	6860      	ldr	r0, [r4, #4]
 80020da:	f020 0c03 	bic.w	ip, r0, #3
 80020de:	ebac 0005 	sub.w	r0, ip, r5
 80020e2:	280f      	cmp	r0, #15
 80020e4:	dd48      	ble.n	8002178 <_malloc_r+0x118>
 80020e6:	1963      	adds	r3, r4, r5
 80020e8:	f045 0501 	orr.w	r5, r5, #1
 80020ec:	6065      	str	r5, [r4, #4]
 80020ee:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80020f2:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80020f6:	f040 0201 	orr.w	r2, r0, #1
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	f844 000c 	str.w	r0, [r4, ip]
 8002100:	e7df      	b.n	80020c2 <_malloc_r+0x62>
 8002102:	0a6b      	lsrs	r3, r5, #9
 8002104:	d02a      	beq.n	800215c <_malloc_r+0xfc>
 8002106:	2b04      	cmp	r3, #4
 8002108:	d812      	bhi.n	8002130 <_malloc_r+0xd0>
 800210a:	09ab      	lsrs	r3, r5, #6
 800210c:	3338      	adds	r3, #56	; 0x38
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8002114:	f1a2 0c08 	sub.w	ip, r2, #8
 8002118:	6854      	ldr	r4, [r2, #4]
 800211a:	4564      	cmp	r4, ip
 800211c:	d006      	beq.n	800212c <_malloc_r+0xcc>
 800211e:	6862      	ldr	r2, [r4, #4]
 8002120:	f022 0203 	bic.w	r2, r2, #3
 8002124:	1b50      	subs	r0, r2, r5
 8002126:	280f      	cmp	r0, #15
 8002128:	dd1c      	ble.n	8002164 <_malloc_r+0x104>
 800212a:	3b01      	subs	r3, #1
 800212c:	3301      	adds	r3, #1
 800212e:	e7ce      	b.n	80020ce <_malloc_r+0x6e>
 8002130:	2b14      	cmp	r3, #20
 8002132:	d801      	bhi.n	8002138 <_malloc_r+0xd8>
 8002134:	335b      	adds	r3, #91	; 0x5b
 8002136:	e7ea      	b.n	800210e <_malloc_r+0xae>
 8002138:	2b54      	cmp	r3, #84	; 0x54
 800213a:	d802      	bhi.n	8002142 <_malloc_r+0xe2>
 800213c:	0b2b      	lsrs	r3, r5, #12
 800213e:	336e      	adds	r3, #110	; 0x6e
 8002140:	e7e5      	b.n	800210e <_malloc_r+0xae>
 8002142:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8002146:	d802      	bhi.n	800214e <_malloc_r+0xee>
 8002148:	0beb      	lsrs	r3, r5, #15
 800214a:	3377      	adds	r3, #119	; 0x77
 800214c:	e7df      	b.n	800210e <_malloc_r+0xae>
 800214e:	f240 5254 	movw	r2, #1364	; 0x554
 8002152:	4293      	cmp	r3, r2
 8002154:	d804      	bhi.n	8002160 <_malloc_r+0x100>
 8002156:	0cab      	lsrs	r3, r5, #18
 8002158:	337c      	adds	r3, #124	; 0x7c
 800215a:	e7d8      	b.n	800210e <_malloc_r+0xae>
 800215c:	233f      	movs	r3, #63	; 0x3f
 800215e:	e7d6      	b.n	800210e <_malloc_r+0xae>
 8002160:	237e      	movs	r3, #126	; 0x7e
 8002162:	e7d4      	b.n	800210e <_malloc_r+0xae>
 8002164:	2800      	cmp	r0, #0
 8002166:	68e1      	ldr	r1, [r4, #12]
 8002168:	db04      	blt.n	8002174 <_malloc_r+0x114>
 800216a:	68a3      	ldr	r3, [r4, #8]
 800216c:	60d9      	str	r1, [r3, #12]
 800216e:	608b      	str	r3, [r1, #8]
 8002170:	18a3      	adds	r3, r4, r2
 8002172:	e7a2      	b.n	80020ba <_malloc_r+0x5a>
 8002174:	460c      	mov	r4, r1
 8002176:	e7d0      	b.n	800211a <_malloc_r+0xba>
 8002178:	2800      	cmp	r0, #0
 800217a:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800217e:	db07      	blt.n	8002190 <_malloc_r+0x130>
 8002180:	44a4      	add	ip, r4
 8002182:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8cc 3004 	str.w	r3, [ip, #4]
 800218e:	e798      	b.n	80020c2 <_malloc_r+0x62>
 8002190:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f080 8099 	bcs.w	80022cc <_malloc_r+0x26c>
 800219a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800219e:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80021a2:	2201      	movs	r2, #1
 80021a4:	f10c 0c01 	add.w	ip, ip, #1
 80021a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80021ac:	4310      	orrs	r0, r2
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 80021b4:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 80021b8:	3a08      	subs	r2, #8
 80021ba:	e9c4 0202 	strd	r0, r2, [r4, #8]
 80021be:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 80021c2:	60c4      	str	r4, [r0, #12]
 80021c4:	2001      	movs	r0, #1
 80021c6:	109a      	asrs	r2, r3, #2
 80021c8:	fa00 f202 	lsl.w	r2, r0, r2
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d326      	bcc.n	8002220 <_malloc_r+0x1c0>
 80021d2:	4210      	tst	r0, r2
 80021d4:	d106      	bne.n	80021e4 <_malloc_r+0x184>
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	0052      	lsls	r2, r2, #1
 80021dc:	4210      	tst	r0, r2
 80021de:	f103 0304 	add.w	r3, r3, #4
 80021e2:	d0fa      	beq.n	80021da <_malloc_r+0x17a>
 80021e4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 80021e8:	46e1      	mov	r9, ip
 80021ea:	4698      	mov	r8, r3
 80021ec:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80021f0:	454c      	cmp	r4, r9
 80021f2:	f040 80af 	bne.w	8002354 <_malloc_r+0x2f4>
 80021f6:	f108 0801 	add.w	r8, r8, #1
 80021fa:	f018 0f03 	tst.w	r8, #3
 80021fe:	f109 0908 	add.w	r9, r9, #8
 8002202:	d1f3      	bne.n	80021ec <_malloc_r+0x18c>
 8002204:	0798      	lsls	r0, r3, #30
 8002206:	f040 80e8 	bne.w	80023da <_malloc_r+0x37a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	ea23 0302 	bic.w	r3, r3, r2
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	0052      	lsls	r2, r2, #1
 8002216:	4290      	cmp	r0, r2
 8002218:	d302      	bcc.n	8002220 <_malloc_r+0x1c0>
 800221a:	2a00      	cmp	r2, #0
 800221c:	f040 80ec 	bne.w	80023f8 <_malloc_r+0x398>
 8002220:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8002224:	f8da 4004 	ldr.w	r4, [sl, #4]
 8002228:	f024 0203 	bic.w	r2, r4, #3
 800222c:	42aa      	cmp	r2, r5
 800222e:	d303      	bcc.n	8002238 <_malloc_r+0x1d8>
 8002230:	1b53      	subs	r3, r2, r5
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f300 8140 	bgt.w	80024b8 <_malloc_r+0x458>
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <_malloc_r+0x338>)
 800223a:	9200      	str	r2, [sp, #0]
 800223c:	2008      	movs	r0, #8
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	f000 f968 	bl	8002514 <sysconf>
 8002244:	4b55      	ldr	r3, [pc, #340]	; (800239c <_malloc_r+0x33c>)
 8002246:	9a00      	ldr	r2, [sp, #0]
 8002248:	6819      	ldr	r1, [r3, #0]
 800224a:	3410      	adds	r4, #16
 800224c:	3101      	adds	r1, #1
 800224e:	442c      	add	r4, r5
 8002250:	bf1f      	itttt	ne
 8002252:	f104 34ff 	addne.w	r4, r4, #4294967295
 8002256:	1824      	addne	r4, r4, r0
 8002258:	4241      	negne	r1, r0
 800225a:	400c      	andne	r4, r1
 800225c:	4680      	mov	r8, r0
 800225e:	4621      	mov	r1, r4
 8002260:	4630      	mov	r0, r6
 8002262:	e9cd 2300 	strd	r2, r3, [sp]
 8002266:	f000 f945 	bl	80024f4 <_sbrk_r>
 800226a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800226e:	4683      	mov	fp, r0
 8002270:	f000 80fb 	beq.w	800246a <_malloc_r+0x40a>
 8002274:	9a00      	ldr	r2, [sp, #0]
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	eb0a 0102 	add.w	r1, sl, r2
 800227c:	4281      	cmp	r1, r0
 800227e:	d902      	bls.n	8002286 <_malloc_r+0x226>
 8002280:	45ba      	cmp	sl, r7
 8002282:	f040 80f2 	bne.w	800246a <_malloc_r+0x40a>
 8002286:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80023a8 <_malloc_r+0x348>
 800228a:	f8d9 0000 	ldr.w	r0, [r9]
 800228e:	4559      	cmp	r1, fp
 8002290:	eb00 0e04 	add.w	lr, r0, r4
 8002294:	f8c9 e000 	str.w	lr, [r9]
 8002298:	f108 3cff 	add.w	ip, r8, #4294967295
 800229c:	f040 80ae 	bne.w	80023fc <_malloc_r+0x39c>
 80022a0:	ea11 0f0c 	tst.w	r1, ip
 80022a4:	f040 80aa 	bne.w	80023fc <_malloc_r+0x39c>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4414      	add	r4, r2
 80022ac:	f044 0401 	orr.w	r4, r4, #1
 80022b0:	605c      	str	r4, [r3, #4]
 80022b2:	4a3b      	ldr	r2, [pc, #236]	; (80023a0 <_malloc_r+0x340>)
 80022b4:	f8d9 3000 	ldr.w	r3, [r9]
 80022b8:	6811      	ldr	r1, [r2, #0]
 80022ba:	428b      	cmp	r3, r1
 80022bc:	bf88      	it	hi
 80022be:	6013      	strhi	r3, [r2, #0]
 80022c0:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <_malloc_r+0x344>)
 80022c2:	6811      	ldr	r1, [r2, #0]
 80022c4:	428b      	cmp	r3, r1
 80022c6:	bf88      	it	hi
 80022c8:	6013      	strhi	r3, [r2, #0]
 80022ca:	e0ce      	b.n	800246a <_malloc_r+0x40a>
 80022cc:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80022d0:	2a04      	cmp	r2, #4
 80022d2:	d818      	bhi.n	8002306 <_malloc_r+0x2a6>
 80022d4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80022d8:	3238      	adds	r2, #56	; 0x38
 80022da:	f102 0e01 	add.w	lr, r2, #1
 80022de:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 80022e2:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 80022e6:	45f0      	cmp	r8, lr
 80022e8:	d12b      	bne.n	8002342 <_malloc_r+0x2e2>
 80022ea:	1092      	asrs	r2, r2, #2
 80022ec:	f04f 0c01 	mov.w	ip, #1
 80022f0:	fa0c f202 	lsl.w	r2, ip, r2
 80022f4:	4310      	orrs	r0, r2
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80022fc:	f8c8 4008 	str.w	r4, [r8, #8]
 8002300:	f8ce 400c 	str.w	r4, [lr, #12]
 8002304:	e75e      	b.n	80021c4 <_malloc_r+0x164>
 8002306:	2a14      	cmp	r2, #20
 8002308:	d801      	bhi.n	800230e <_malloc_r+0x2ae>
 800230a:	325b      	adds	r2, #91	; 0x5b
 800230c:	e7e5      	b.n	80022da <_malloc_r+0x27a>
 800230e:	2a54      	cmp	r2, #84	; 0x54
 8002310:	d803      	bhi.n	800231a <_malloc_r+0x2ba>
 8002312:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8002316:	326e      	adds	r2, #110	; 0x6e
 8002318:	e7df      	b.n	80022da <_malloc_r+0x27a>
 800231a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800231e:	d803      	bhi.n	8002328 <_malloc_r+0x2c8>
 8002320:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8002324:	3277      	adds	r2, #119	; 0x77
 8002326:	e7d8      	b.n	80022da <_malloc_r+0x27a>
 8002328:	f240 5e54 	movw	lr, #1364	; 0x554
 800232c:	4572      	cmp	r2, lr
 800232e:	bf9a      	itte	ls
 8002330:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8002334:	327c      	addls	r2, #124	; 0x7c
 8002336:	227e      	movhi	r2, #126	; 0x7e
 8002338:	e7cf      	b.n	80022da <_malloc_r+0x27a>
 800233a:	f8de e008 	ldr.w	lr, [lr, #8]
 800233e:	45f0      	cmp	r8, lr
 8002340:	d005      	beq.n	800234e <_malloc_r+0x2ee>
 8002342:	f8de 2004 	ldr.w	r2, [lr, #4]
 8002346:	f022 0203 	bic.w	r2, r2, #3
 800234a:	4562      	cmp	r2, ip
 800234c:	d8f5      	bhi.n	800233a <_malloc_r+0x2da>
 800234e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8002352:	e7d1      	b.n	80022f8 <_malloc_r+0x298>
 8002354:	6860      	ldr	r0, [r4, #4]
 8002356:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800235a:	f020 0003 	bic.w	r0, r0, #3
 800235e:	eba0 0a05 	sub.w	sl, r0, r5
 8002362:	f1ba 0f0f 	cmp.w	sl, #15
 8002366:	dd21      	ble.n	80023ac <_malloc_r+0x34c>
 8002368:	68a2      	ldr	r2, [r4, #8]
 800236a:	1963      	adds	r3, r4, r5
 800236c:	f045 0501 	orr.w	r5, r5, #1
 8002370:	6065      	str	r5, [r4, #4]
 8002372:	f8c2 e00c 	str.w	lr, [r2, #12]
 8002376:	f8ce 2008 	str.w	r2, [lr, #8]
 800237a:	f04a 0201 	orr.w	r2, sl, #1
 800237e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8002382:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	f844 a000 	str.w	sl, [r4, r0]
 800238c:	e699      	b.n	80020c2 <_malloc_r+0x62>
 800238e:	bf00      	nop
 8002390:	20000438 	.word	0x20000438
 8002394:	20000440 	.word	0x20000440
 8002398:	200008ec 	.word	0x200008ec
 800239c:	20000840 	.word	0x20000840
 80023a0:	200008e4 	.word	0x200008e4
 80023a4:	200008e8 	.word	0x200008e8
 80023a8:	200008bc 	.word	0x200008bc
 80023ac:	f1ba 0f00 	cmp.w	sl, #0
 80023b0:	db11      	blt.n	80023d6 <_malloc_r+0x376>
 80023b2:	4420      	add	r0, r4
 80023b4:	6843      	ldr	r3, [r0, #4]
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6043      	str	r3, [r0, #4]
 80023bc:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80023c0:	4630      	mov	r0, r6
 80023c2:	f8c3 e00c 	str.w	lr, [r3, #12]
 80023c6:	f8ce 3008 	str.w	r3, [lr, #8]
 80023ca:	f000 f88d 	bl	80024e8 <__malloc_unlock>
 80023ce:	4620      	mov	r0, r4
 80023d0:	b003      	add	sp, #12
 80023d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023d6:	4674      	mov	r4, lr
 80023d8:	e70a      	b.n	80021f0 <_malloc_r+0x190>
 80023da:	f1ac 0008 	sub.w	r0, ip, #8
 80023de:	f8dc c000 	ldr.w	ip, [ip]
 80023e2:	4584      	cmp	ip, r0
 80023e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80023e8:	f43f af0c 	beq.w	8002204 <_malloc_r+0x1a4>
 80023ec:	e711      	b.n	8002212 <_malloc_r+0x1b2>
 80023ee:	3304      	adds	r3, #4
 80023f0:	0052      	lsls	r2, r2, #1
 80023f2:	4210      	tst	r0, r2
 80023f4:	d0fb      	beq.n	80023ee <_malloc_r+0x38e>
 80023f6:	e6f5      	b.n	80021e4 <_malloc_r+0x184>
 80023f8:	4643      	mov	r3, r8
 80023fa:	e7fa      	b.n	80023f2 <_malloc_r+0x392>
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	3001      	adds	r0, #1
 8002402:	bf1b      	ittet	ne
 8002404:	ebab 0101 	subne.w	r1, fp, r1
 8002408:	4471      	addne	r1, lr
 800240a:	f8c3 b000 	streq.w	fp, [r3]
 800240e:	f8c9 1000 	strne.w	r1, [r9]
 8002412:	f01b 0307 	ands.w	r3, fp, #7
 8002416:	bf1c      	itt	ne
 8002418:	f1c3 0308 	rsbne	r3, r3, #8
 800241c:	449b      	addne	fp, r3
 800241e:	445c      	add	r4, fp
 8002420:	4498      	add	r8, r3
 8002422:	ea04 030c 	and.w	r3, r4, ip
 8002426:	eba8 0803 	sub.w	r8, r8, r3
 800242a:	4641      	mov	r1, r8
 800242c:	4630      	mov	r0, r6
 800242e:	f000 f861 	bl	80024f4 <_sbrk_r>
 8002432:	1c43      	adds	r3, r0, #1
 8002434:	bf04      	itt	eq
 8002436:	4658      	moveq	r0, fp
 8002438:	f04f 0800 	moveq.w	r8, #0
 800243c:	f8d9 3000 	ldr.w	r3, [r9]
 8002440:	f8c7 b008 	str.w	fp, [r7, #8]
 8002444:	eba0 000b 	sub.w	r0, r0, fp
 8002448:	4440      	add	r0, r8
 800244a:	4443      	add	r3, r8
 800244c:	f040 0001 	orr.w	r0, r0, #1
 8002450:	45ba      	cmp	sl, r7
 8002452:	9a00      	ldr	r2, [sp, #0]
 8002454:	f8c9 3000 	str.w	r3, [r9]
 8002458:	f8cb 0004 	str.w	r0, [fp, #4]
 800245c:	f43f af29 	beq.w	80022b2 <_malloc_r+0x252>
 8002460:	2a0f      	cmp	r2, #15
 8002462:	d810      	bhi.n	8002486 <_malloc_r+0x426>
 8002464:	2301      	movs	r3, #1
 8002466:	f8cb 3004 	str.w	r3, [fp, #4]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	f022 0203 	bic.w	r2, r2, #3
 8002472:	42aa      	cmp	r2, r5
 8002474:	eba2 0305 	sub.w	r3, r2, r5
 8002478:	d301      	bcc.n	800247e <_malloc_r+0x41e>
 800247a:	2b0f      	cmp	r3, #15
 800247c:	dc1c      	bgt.n	80024b8 <_malloc_r+0x458>
 800247e:	4630      	mov	r0, r6
 8002480:	f000 f832 	bl	80024e8 <__malloc_unlock>
 8002484:	e5f8      	b.n	8002078 <_malloc_r+0x18>
 8002486:	f8da 3004 	ldr.w	r3, [sl, #4]
 800248a:	f1a2 040c 	sub.w	r4, r2, #12
 800248e:	f024 0407 	bic.w	r4, r4, #7
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	4323      	orrs	r3, r4
 8002498:	f8ca 3004 	str.w	r3, [sl, #4]
 800249c:	2205      	movs	r2, #5
 800249e:	eb0a 0304 	add.w	r3, sl, r4
 80024a2:	2c0f      	cmp	r4, #15
 80024a4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80024a8:	f67f af03 	bls.w	80022b2 <_malloc_r+0x252>
 80024ac:	f10a 0108 	add.w	r1, sl, #8
 80024b0:	4630      	mov	r0, r6
 80024b2:	f000 f8b5 	bl	8002620 <_free_r>
 80024b6:	e6fc      	b.n	80022b2 <_malloc_r+0x252>
 80024b8:	68bc      	ldr	r4, [r7, #8]
 80024ba:	f045 0201 	orr.w	r2, r5, #1
 80024be:	4425      	add	r5, r4
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6062      	str	r2, [r4, #4]
 80024c6:	60bd      	str	r5, [r7, #8]
 80024c8:	606b      	str	r3, [r5, #4]
 80024ca:	e5fa      	b.n	80020c2 <_malloc_r+0x62>

080024cc <memset>:
 80024cc:	4402      	add	r2, r0
 80024ce:	4603      	mov	r3, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <__malloc_lock>:
 80024dc:	4801      	ldr	r0, [pc, #4]	; (80024e4 <__malloc_lock+0x8>)
 80024de:	f7ff bdb5 	b.w	800204c <__retarget_lock_acquire_recursive>
 80024e2:	bf00      	nop
 80024e4:	200008f8 	.word	0x200008f8

080024e8 <__malloc_unlock>:
 80024e8:	4801      	ldr	r0, [pc, #4]	; (80024f0 <__malloc_unlock+0x8>)
 80024ea:	f7ff bdb0 	b.w	800204e <__retarget_lock_release_recursive>
 80024ee:	bf00      	nop
 80024f0:	200008f8 	.word	0x200008f8

080024f4 <_sbrk_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4c06      	ldr	r4, [pc, #24]	; (8002510 <_sbrk_r+0x1c>)
 80024f8:	2300      	movs	r3, #0
 80024fa:	4605      	mov	r5, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	6023      	str	r3, [r4, #0]
 8002500:	f7fe f9c0 	bl	8000884 <_sbrk>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_sbrk_r+0x1a>
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	b103      	cbz	r3, 800250e <_sbrk_r+0x1a>
 800250c:	602b      	str	r3, [r5, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	20000900 	.word	0x20000900

08002514 <sysconf>:
 8002514:	2808      	cmp	r0, #8
 8002516:	b508      	push	{r3, lr}
 8002518:	d006      	beq.n	8002528 <sysconf+0x14>
 800251a:	f7ff fd6d 	bl	8001ff8 <__errno>
 800251e:	2316      	movs	r3, #22
 8002520:	6003      	str	r3, [r0, #0]
 8002522:	f04f 30ff 	mov.w	r0, #4294967295
 8002526:	bd08      	pop	{r3, pc}
 8002528:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800252c:	e7fb      	b.n	8002526 <sysconf+0x12>
	...

08002530 <register_fini>:
 8002530:	4b02      	ldr	r3, [pc, #8]	; (800253c <register_fini+0xc>)
 8002532:	b113      	cbz	r3, 800253a <register_fini+0xa>
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <register_fini+0x10>)
 8002536:	f000 b805 	b.w	8002544 <atexit>
 800253a:	4770      	bx	lr
 800253c:	00000000 	.word	0x00000000
 8002540:	08002551 	.word	0x08002551

08002544 <atexit>:
 8002544:	2300      	movs	r3, #0
 8002546:	4601      	mov	r1, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 b924 	b.w	8002798 <__register_exitproc>

08002550 <__libc_fini_array>:
 8002550:	b538      	push	{r3, r4, r5, lr}
 8002552:	4d07      	ldr	r5, [pc, #28]	; (8002570 <__libc_fini_array+0x20>)
 8002554:	4c07      	ldr	r4, [pc, #28]	; (8002574 <__libc_fini_array+0x24>)
 8002556:	1b64      	subs	r4, r4, r5
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	b91c      	cbnz	r4, 8002564 <__libc_fini_array+0x14>
 800255c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002560:	f000 b976 	b.w	8002850 <_fini>
 8002564:	3c01      	subs	r4, #1
 8002566:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800256a:	4798      	blx	r3
 800256c:	e7f5      	b.n	800255a <__libc_fini_array+0xa>
 800256e:	bf00      	nop
 8002570:	0800288c 	.word	0x0800288c
 8002574:	08002890 	.word	0x08002890

08002578 <_malloc_trim_r>:
 8002578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257c:	4605      	mov	r5, r0
 800257e:	2008      	movs	r0, #8
 8002580:	460c      	mov	r4, r1
 8002582:	f7ff ffc7 	bl	8002514 <sysconf>
 8002586:	4f23      	ldr	r7, [pc, #140]	; (8002614 <_malloc_trim_r+0x9c>)
 8002588:	4680      	mov	r8, r0
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff ffa6 	bl	80024dc <__malloc_lock>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	685e      	ldr	r6, [r3, #4]
 8002594:	f026 0603 	bic.w	r6, r6, #3
 8002598:	1b34      	subs	r4, r6, r4
 800259a:	3c11      	subs	r4, #17
 800259c:	4444      	add	r4, r8
 800259e:	fbb4 f4f8 	udiv	r4, r4, r8
 80025a2:	3c01      	subs	r4, #1
 80025a4:	fb08 f404 	mul.w	r4, r8, r4
 80025a8:	45a0      	cmp	r8, r4
 80025aa:	dd05      	ble.n	80025b8 <_malloc_trim_r+0x40>
 80025ac:	4628      	mov	r0, r5
 80025ae:	f7ff ff9b 	bl	80024e8 <__malloc_unlock>
 80025b2:	2000      	movs	r0, #0
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b8:	2100      	movs	r1, #0
 80025ba:	4628      	mov	r0, r5
 80025bc:	f7ff ff9a 	bl	80024f4 <_sbrk_r>
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4433      	add	r3, r6
 80025c4:	4298      	cmp	r0, r3
 80025c6:	d1f1      	bne.n	80025ac <_malloc_trim_r+0x34>
 80025c8:	4261      	negs	r1, r4
 80025ca:	4628      	mov	r0, r5
 80025cc:	f7ff ff92 	bl	80024f4 <_sbrk_r>
 80025d0:	3001      	adds	r0, #1
 80025d2:	d110      	bne.n	80025f6 <_malloc_trim_r+0x7e>
 80025d4:	2100      	movs	r1, #0
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff ff8c 	bl	80024f4 <_sbrk_r>
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	1a83      	subs	r3, r0, r2
 80025e0:	2b0f      	cmp	r3, #15
 80025e2:	dde3      	ble.n	80025ac <_malloc_trim_r+0x34>
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <_malloc_trim_r+0xa0>)
 80025e6:	6809      	ldr	r1, [r1, #0]
 80025e8:	1a40      	subs	r0, r0, r1
 80025ea:	490c      	ldr	r1, [pc, #48]	; (800261c <_malloc_trim_r+0xa4>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6008      	str	r0, [r1, #0]
 80025f2:	6053      	str	r3, [r2, #4]
 80025f4:	e7da      	b.n	80025ac <_malloc_trim_r+0x34>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4a08      	ldr	r2, [pc, #32]	; (800261c <_malloc_trim_r+0xa4>)
 80025fa:	1b36      	subs	r6, r6, r4
 80025fc:	f046 0601 	orr.w	r6, r6, #1
 8002600:	605e      	str	r6, [r3, #4]
 8002602:	6813      	ldr	r3, [r2, #0]
 8002604:	4628      	mov	r0, r5
 8002606:	1b1c      	subs	r4, r3, r4
 8002608:	6014      	str	r4, [r2, #0]
 800260a:	f7ff ff6d 	bl	80024e8 <__malloc_unlock>
 800260e:	2001      	movs	r0, #1
 8002610:	e7d0      	b.n	80025b4 <_malloc_trim_r+0x3c>
 8002612:	bf00      	nop
 8002614:	20000438 	.word	0x20000438
 8002618:	20000840 	.word	0x20000840
 800261c:	200008bc 	.word	0x200008bc

08002620 <_free_r>:
 8002620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002624:	4604      	mov	r4, r0
 8002626:	4688      	mov	r8, r1
 8002628:	2900      	cmp	r1, #0
 800262a:	f000 80ab 	beq.w	8002784 <_free_r+0x164>
 800262e:	f7ff ff55 	bl	80024dc <__malloc_lock>
 8002632:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8002636:	4d54      	ldr	r5, [pc, #336]	; (8002788 <_free_r+0x168>)
 8002638:	f022 0001 	bic.w	r0, r2, #1
 800263c:	f1a8 0308 	sub.w	r3, r8, #8
 8002640:	181f      	adds	r7, r3, r0
 8002642:	68a9      	ldr	r1, [r5, #8]
 8002644:	687e      	ldr	r6, [r7, #4]
 8002646:	42b9      	cmp	r1, r7
 8002648:	f026 0603 	bic.w	r6, r6, #3
 800264c:	f002 0201 	and.w	r2, r2, #1
 8002650:	d11b      	bne.n	800268a <_free_r+0x6a>
 8002652:	4430      	add	r0, r6
 8002654:	b93a      	cbnz	r2, 8002666 <_free_r+0x46>
 8002656:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	4410      	add	r0, r2
 800265e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8002662:	60ca      	str	r2, [r1, #12]
 8002664:	6091      	str	r1, [r2, #8]
 8002666:	f040 0201 	orr.w	r2, r0, #1
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	60ab      	str	r3, [r5, #8]
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <_free_r+0x16c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4283      	cmp	r3, r0
 8002674:	d804      	bhi.n	8002680 <_free_r+0x60>
 8002676:	4b46      	ldr	r3, [pc, #280]	; (8002790 <_free_r+0x170>)
 8002678:	4620      	mov	r0, r4
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	f7ff ff7c 	bl	8002578 <_malloc_trim_r>
 8002680:	4620      	mov	r0, r4
 8002682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002686:	f7ff bf2f 	b.w	80024e8 <__malloc_unlock>
 800268a:	607e      	str	r6, [r7, #4]
 800268c:	2a00      	cmp	r2, #0
 800268e:	d139      	bne.n	8002704 <_free_r+0xe4>
 8002690:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8002694:	1a5b      	subs	r3, r3, r1
 8002696:	4408      	add	r0, r1
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	f105 0c08 	add.w	ip, r5, #8
 800269e:	4561      	cmp	r1, ip
 80026a0:	d032      	beq.n	8002708 <_free_r+0xe8>
 80026a2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80026a6:	f8c1 c00c 	str.w	ip, [r1, #12]
 80026aa:	f8cc 1008 	str.w	r1, [ip, #8]
 80026ae:	19b9      	adds	r1, r7, r6
 80026b0:	6849      	ldr	r1, [r1, #4]
 80026b2:	07c9      	lsls	r1, r1, #31
 80026b4:	d40a      	bmi.n	80026cc <_free_r+0xac>
 80026b6:	4430      	add	r0, r6
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	bb3a      	cbnz	r2, 800270c <_free_r+0xec>
 80026bc:	4e35      	ldr	r6, [pc, #212]	; (8002794 <_free_r+0x174>)
 80026be:	42b1      	cmp	r1, r6
 80026c0:	d124      	bne.n	800270c <_free_r+0xec>
 80026c2:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80026c6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f040 0101 	orr.w	r1, r0, #1
 80026d0:	6059      	str	r1, [r3, #4]
 80026d2:	5018      	str	r0, [r3, r0]
 80026d4:	2a00      	cmp	r2, #0
 80026d6:	d1d3      	bne.n	8002680 <_free_r+0x60>
 80026d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80026dc:	d21a      	bcs.n	8002714 <_free_r+0xf4>
 80026de:	08c0      	lsrs	r0, r0, #3
 80026e0:	1081      	asrs	r1, r0, #2
 80026e2:	2201      	movs	r2, #1
 80026e4:	408a      	lsls	r2, r1
 80026e6:	6869      	ldr	r1, [r5, #4]
 80026e8:	3001      	adds	r0, #1
 80026ea:	430a      	orrs	r2, r1
 80026ec:	606a      	str	r2, [r5, #4]
 80026ee:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80026f2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80026f6:	3a08      	subs	r2, #8
 80026f8:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80026fc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8002700:	60cb      	str	r3, [r1, #12]
 8002702:	e7bd      	b.n	8002680 <_free_r+0x60>
 8002704:	2200      	movs	r2, #0
 8002706:	e7d2      	b.n	80026ae <_free_r+0x8e>
 8002708:	2201      	movs	r2, #1
 800270a:	e7d0      	b.n	80026ae <_free_r+0x8e>
 800270c:	68fe      	ldr	r6, [r7, #12]
 800270e:	60ce      	str	r6, [r1, #12]
 8002710:	60b1      	str	r1, [r6, #8]
 8002712:	e7db      	b.n	80026cc <_free_r+0xac>
 8002714:	0a42      	lsrs	r2, r0, #9
 8002716:	2a04      	cmp	r2, #4
 8002718:	d813      	bhi.n	8002742 <_free_r+0x122>
 800271a:	0982      	lsrs	r2, r0, #6
 800271c:	3238      	adds	r2, #56	; 0x38
 800271e:	1c51      	adds	r1, r2, #1
 8002720:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8002724:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8002728:	428e      	cmp	r6, r1
 800272a:	d124      	bne.n	8002776 <_free_r+0x156>
 800272c:	2001      	movs	r0, #1
 800272e:	1092      	asrs	r2, r2, #2
 8002730:	fa00 f202 	lsl.w	r2, r0, r2
 8002734:	6868      	ldr	r0, [r5, #4]
 8002736:	4302      	orrs	r2, r0
 8002738:	606a      	str	r2, [r5, #4]
 800273a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800273e:	60b3      	str	r3, [r6, #8]
 8002740:	e7de      	b.n	8002700 <_free_r+0xe0>
 8002742:	2a14      	cmp	r2, #20
 8002744:	d801      	bhi.n	800274a <_free_r+0x12a>
 8002746:	325b      	adds	r2, #91	; 0x5b
 8002748:	e7e9      	b.n	800271e <_free_r+0xfe>
 800274a:	2a54      	cmp	r2, #84	; 0x54
 800274c:	d802      	bhi.n	8002754 <_free_r+0x134>
 800274e:	0b02      	lsrs	r2, r0, #12
 8002750:	326e      	adds	r2, #110	; 0x6e
 8002752:	e7e4      	b.n	800271e <_free_r+0xfe>
 8002754:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002758:	d802      	bhi.n	8002760 <_free_r+0x140>
 800275a:	0bc2      	lsrs	r2, r0, #15
 800275c:	3277      	adds	r2, #119	; 0x77
 800275e:	e7de      	b.n	800271e <_free_r+0xfe>
 8002760:	f240 5154 	movw	r1, #1364	; 0x554
 8002764:	428a      	cmp	r2, r1
 8002766:	bf9a      	itte	ls
 8002768:	0c82      	lsrls	r2, r0, #18
 800276a:	327c      	addls	r2, #124	; 0x7c
 800276c:	227e      	movhi	r2, #126	; 0x7e
 800276e:	e7d6      	b.n	800271e <_free_r+0xfe>
 8002770:	6889      	ldr	r1, [r1, #8]
 8002772:	428e      	cmp	r6, r1
 8002774:	d004      	beq.n	8002780 <_free_r+0x160>
 8002776:	684a      	ldr	r2, [r1, #4]
 8002778:	f022 0203 	bic.w	r2, r2, #3
 800277c:	4282      	cmp	r2, r0
 800277e:	d8f7      	bhi.n	8002770 <_free_r+0x150>
 8002780:	68ce      	ldr	r6, [r1, #12]
 8002782:	e7da      	b.n	800273a <_free_r+0x11a>
 8002784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002788:	20000438 	.word	0x20000438
 800278c:	20000844 	.word	0x20000844
 8002790:	200008ec 	.word	0x200008ec
 8002794:	20000440 	.word	0x20000440

08002798 <__register_exitproc>:
 8002798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800279c:	4c26      	ldr	r4, [pc, #152]	; (8002838 <__register_exitproc+0xa0>)
 800279e:	4606      	mov	r6, r0
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	4698      	mov	r8, r3
 80027a4:	460f      	mov	r7, r1
 80027a6:	4691      	mov	r9, r2
 80027a8:	f7ff fc50 	bl	800204c <__retarget_lock_acquire_recursive>
 80027ac:	4b23      	ldr	r3, [pc, #140]	; (800283c <__register_exitproc+0xa4>)
 80027ae:	681d      	ldr	r5, [r3, #0]
 80027b0:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 80027b4:	b918      	cbnz	r0, 80027be <__register_exitproc+0x26>
 80027b6:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 80027ba:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80027be:	6843      	ldr	r3, [r0, #4]
 80027c0:	2b1f      	cmp	r3, #31
 80027c2:	dd19      	ble.n	80027f8 <__register_exitproc+0x60>
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <__register_exitproc+0xa8>)
 80027c6:	b933      	cbnz	r3, 80027d6 <__register_exitproc+0x3e>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	f7ff fc40 	bl	800204e <__retarget_lock_release_recursive>
 80027ce:	f04f 30ff 	mov.w	r0, #4294967295
 80027d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80027da:	f7ff fc39 	bl	8002050 <malloc>
 80027de:	2800      	cmp	r0, #0
 80027e0:	d0f2      	beq.n	80027c8 <__register_exitproc+0x30>
 80027e2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80027e6:	6003      	str	r3, [r0, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	6042      	str	r2, [r0, #4]
 80027ec:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 80027f0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 80027f4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 80027f8:	6843      	ldr	r3, [r0, #4]
 80027fa:	b19e      	cbz	r6, 8002824 <__register_exitproc+0x8c>
 80027fc:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8002800:	2201      	movs	r2, #1
 8002802:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8002806:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800280a:	409a      	lsls	r2, r3
 800280c:	4311      	orrs	r1, r2
 800280e:	2e02      	cmp	r6, #2
 8002810:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8002814:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8002818:	bf02      	ittt	eq
 800281a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800281e:	430a      	orreq	r2, r1
 8002820:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	3302      	adds	r3, #2
 8002828:	6042      	str	r2, [r0, #4]
 800282a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800282e:	6820      	ldr	r0, [r4, #0]
 8002830:	f7ff fc0d 	bl	800204e <__retarget_lock_release_recursive>
 8002834:	2000      	movs	r0, #0
 8002836:	e7cc      	b.n	80027d2 <__register_exitproc+0x3a>
 8002838:	20000848 	.word	0x20000848
 800283c:	08002874 	.word	0x08002874
 8002840:	08002051 	.word	0x08002051

08002844 <_init>:
 8002844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002846:	bf00      	nop
 8002848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284a:	bc08      	pop	{r3}
 800284c:	469e      	mov	lr, r3
 800284e:	4770      	bx	lr

08002850 <_fini>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	bf00      	nop
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr
